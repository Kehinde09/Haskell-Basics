module Main where

import Data.Char (toLower)
import Data.List (sort)
import System.IO
import System.IO.Error (catchIOError)

-- HC12T1: Print a Welcome Message
welcomeMessage :: String
welcomeMessage = "Welcome to Haskell Programming!"

-- HC12T2: Add Two Numbers
addTwoNumbers :: Int -> Int -> Int
addTwoNumbers x y = x + y

-- HC12T3: Factorial Function
factorial :: Int -> Int
factorial 0 = 1
factorial n = n * factorial (n - 1)

-- HC12T4: First 10 Fibonacci Numbers
fibonacci :: Int -> Int
fibonacci 0 = 0
fibonacci 1 = 1
fibonacci n = fibonacci (n - 1) + fibonacci (n - 2)

first10Fibs :: [Int]
first10Fibs = map fibonacci [0..9]

-- HC12T5: Palindrome Checker
isPalindrome :: String -> Bool
isPalindrome s =
  let cleaned = map toLower s
  in cleaned == reverse cleaned

-- HC12T6: Sort a List of Integers
sortList :: [Int] -> [Int]
sortList = sort

-- HC12T7: Calculate Circle Area
calculateCircleArea :: Double -> Double
calculateCircleArea r = pi * r * r

-- HC12T8: Merge Two Sorted Lists
mergeLists :: Ord a => [a] -> [a] -> [a]
mergeLists [] ys = ys
mergeLists xs [] = xs
mergeLists (x:xs) (y:ys)
  | x <= y    = x : mergeLists xs (y:ys)
  | otherwise = y : mergeLists (x:xs) ys

-- HC12T9: Read and Print File Content
printFileContent :: FilePath -> IO ()
printFileContent path =
  catchIOError (readFile path >>= putStrLn)
               (\_ -> putStrLn "Error: File does not exist.")

-- HC12T10: Mathematical Operations Module
add :: Int -> Int -> Int
add = (+)

multiply :: Int -> Int -> Int
multiply = (*)

square :: Int -> Int
square x = x * x

main :: IO ()
main = do
  putStrLn "HC12T1: Print a Welcome Message"
  putStrLn welcomeMessage

  putStrLn "\nHC12T2: Add Two Numbers"
  print (addTwoNumbers 7 5)

  putStrLn "\nHC12T3: Factorial Function"
  print (factorial 5)

  putStrLn "\nHC12T4: First 10 Fibonacci Numbers"
  print first10Fibs

  putStrLn "\nHC12T5: Palindrome Checker"
  putStrLn ("Is 'Level' a palindrome? " ++ show (isPalindrome "Level"))
  putStrLn ("Is 'Hello' a palindrome? " ++ show (isPalindrome "Hello"))

  putStrLn "\nHC12T6: Sort a List of Integers"
  print (sortList [42, 3, 15, 7, 9, 1])

  putStrLn "\nHC12T7: Calculate Circle Area"
  print (calculateCircleArea 5.0)

  putStrLn "\nHC12T8: Merge Two Sorted Lists"
  print (mergeLists [1,3,5,7] [2,4,6,8])

  putStrLn "\nHC12T9: Read and Print File Content"
  writeFile "example.txt" "This is example file content."
  printFileContent "example.txt"
  printFileContent "nonexistent.txt"

  putStrLn "\nHC12T10: Mathematical Operations Module"
  print (add 3 4)
  print (multiply 6 7)
  print (square 9)
