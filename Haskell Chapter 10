{-# LANGUAGE FlexibleInstances #-}

-- HC10T1: ShowSimple Type Class
class ShowSimple a where
    showSimple :: a -> String

data PaymentMethod = Cash | Card | Paypal
    deriving (Show, Eq)

instance ShowSimple PaymentMethod where
    showSimple Cash   = "Cash"
    showSimple Card   = "Card"
    showSimple Paypal = "Paypal"

-- HC10T2: Summable Type Class
class Summable a where
    sumUp :: [a] -> a

instance Summable Int where
    sumUp = sum

-- HC10T3: Comparable Type Class
class Comparable a where
    compareWith :: a -> a -> Ordering

data Blockchain = Bitcoin | Ethereum | Solana
    deriving (Show, Ord)  -- removed Eq here

instance Comparable Blockchain where
    compareWith = compare

-- HC10T4: Eq Instance for Box
data Box a = Box a

instance (Eq a) => Eq (Box a) where
    (Box x) == (Box y) = x == y

-- HC10T5: ShowDetailed Type Class
class ShowDetailed a where
    showDetailed :: a -> String

data User = User { userId :: Int, userName :: String }

instance ShowDetailed User where
    showDetailed (User uid name) = "User[ID=" ++ show uid ++ ", Name=" ++ name ++ "]"

-- HC10T6: Mutual Recursion in Eq for Blockchain
instance Eq Blockchain where
    a == b = compare a b == EQ
    a /= b = not (a == b)

-- HC10T7: Convertible Type Class
class Convertible a b where
    convert :: a -> b

instance Convertible PaymentMethod String where
    convert = showSimple

-- HC10T8: AdvancedEq Subclass of Eq
class Eq a => AdvancedEq a where
    compareEquality :: a -> a -> Bool
    compareEquality x y = x == y

instance AdvancedEq PaymentMethod

-- HC10T9: MinMax Type Class
class MinMax a where
    minValue :: a
    maxValue :: a

instance MinMax Int where
    minValue = minBound
    maxValue = maxBound

-- HC10T10: Concatenatable Type Class
class Concatenatable a where
    concatWith :: a -> a -> a

instance Concatenatable String where
    concatWith = (++)

-- Main demonstration
main :: IO ()
main = do
    putStrLn "HC10T1: ShowSimple for PaymentMethod"
    print (showSimple Cash)
    print (showSimple Paypal)

    putStrLn "\nHC10T2: Summable for Int"
    print (sumUp [1, 2, 3, 4, 5] :: Int)

    putStrLn "\nHC10T3: Comparable for Blockchain"
    print (compareWith Bitcoin Ethereum)

    putStrLn "\nHC10T4: Eq instance for Box"
    print (Box 5 == Box 5)
    print (Box "abc" == Box "def")

    putStrLn "\nHC10T5: ShowDetailed for User"
    print (showDetailed (User 1 "Alice"))

    putStrLn "\nHC10T6: Mutual Recursion Eq for Blockchain"
    print (Bitcoin == Ethereum)
    print (Bitcoin /= Bitcoin)

    putStrLn "\nHC10T7: Convertible PaymentMethod -> String"
    print (convert Card :: String)

    putStrLn "\nHC10T8: AdvancedEq for PaymentMethod"
    print (compareEquality Cash Cash)
    print (compareEquality Cash Paypal)

    putStrLn "\nHC10T9: MinMax for Int"
    print (minValue :: Int)
    print (maxValue :: Int)

    putStrLn "\nHC10T10: Concatenatable for String"
    print (concatWith "Hello, " "World!")
