import Data.Char (isUpper)  -- move this to the top

-- HC5T1: Using applyTwice
applyThrice :: (Int -> Int) -> Int -> Int
applyThrice f x = f (f (f x))

-- HC5T2: Filtering Odd Numbers
oddNumbers :: [Int]
oddNumbers = filter odd [1..30]

-- HC5T3: Checking for Uppercase Letters
startsWithUppercase :: String -> Bool
startsWithUppercase [] = False
startsWithUppercase (x:_) = isUpper x

hasUppercaseStart :: [String] -> Bool
hasUppercaseStart = any startsWithUppercase

-- HC5T4: Using Lambda Functions
biggerThan10 :: Int -> Bool
biggerThan10 = \x -> x > 10

-- HC5T5: Partial Application
multiplyByFive :: Int -> Int
multiplyByFive = (*) 5

-- HC5T6: Function Composition
evenSquares :: [Int] -> [Int]
evenSquares = filter even . map (^2)

-- HC5T7: The $ Operator
result :: Int
result = sum $ map (*2) $ filter (>3) [1..10]

-- HC5T8: Point-Free Style
addFive :: Int -> Int
addFive = (+5)

-- HC5T9: Higher-Order Function to Transform a List
transformList :: (a -> a) -> [a] -> [a]
transformList f = map (f . f)

-- HC5T10: Combining Higher-Order Functions
anySquareGreaterThan50 :: [Int] -> Bool
anySquareGreaterThan50 = any (>50) . map (^2)

-- Main function to demonstrate output
main :: IO ()
main = do
  print $ applyThrice (+1) 0                       -- HC5T1
  print oddNumbers                                  -- HC5T2
  print $ hasUppercaseStart ["hello", "World"]     -- HC5T3
  print $ biggerThan10 15                           -- HC5T4
  print $ multiplyByFive 6                          -- HC5T5
  print $ evenSquares [1..10]                       -- HC5T6
  print result                                      -- HC5T7
  print $ addFive 10                                -- HC5T8
  print $ transformList (+1) [1, 2, 3]              -- HC5T9
  print $ anySquareGreaterThan50 [3, 5, 8]          -- HC5T10
