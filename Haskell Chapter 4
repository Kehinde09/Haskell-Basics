-- HC4T1 - Task 1: Define a weatherReport Function using pattern matching
weatherReport :: String -> String
weatherReport "sunny"  = "It's a bright and beautiful day!"
weatherReport "rainy"  = "Don't forget your umbrella!"
weatherReport "cloudy" = "A bit gloomy, but no rain yet!"
weatherReport _        = "Weather unknown"

-- HC4T2 - Task 2: Define a dayType Function
dayType :: String -> String
dayType "Saturday" = "It's a weekend!"
dayType "Sunday"   = "It's a weekend!"
dayType day
    | day `elem` ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"] = "It's a weekday."
    | otherwise = "Invalid day"

-- HC4T3 - Task 3: Define a gradeComment Function
gradeComment :: Int -> String
gradeComment n
    | n >= 90 && n <= 100 = "Excellent!"
    | n >= 70 && n <= 89  = "Good job!"
    | n >= 50 && n <= 69  = "You passed."
    | n >= 0 && n <= 49   = "Better luck next time."
    | otherwise           = "Invalid grade"

-- HC4T4 & HC4T5 - Tasks 4 & 5: Rewrite and Extend specialBirthday using pattern matching
specialBirthday :: Int -> String
specialBirthday 1 = "First birthday - Happy 1st!"
specialBirthday 16 = "Sweet sixteen!"
specialBirthday 18 = "You're now an adult!"
specialBirthday 21 = "Cheers to 21!"
specialBirthday 50 = "Half a century old!"
specialBirthday age = "Happy " ++ show age ++ "th birthday!"

-- HC4T6 - Task 6: Identify List Contents Using Pattern Matching
whatsInsideThisList :: [a] -> String
whatsInsideThisList [] = "The list is empty."
whatsInsideThisList [_] = "The list has one element."
whatsInsideThisList [_, _] = "The list has two elements."
whatsInsideThisList _ = "The list has many elements."

-- HC4T7 - Task 7: Ignore Elements in a List
firstAndThird :: [a] -> [a]
firstAndThird (x:_:z:_) = [x, z]
firstAndThird _ = []

-- HC4T8 - Task 8: Extract Values from Tuples
describeTuple :: (String, Int, Bool) -> String
describeTuple (name, age, isStudent) =
    name ++ " is " ++ show age ++ " years old and " ++
    (if isStudent then "is a student." else "is not a student.")

-- Main function to test all tasks
main :: IO ()
main = do
    -- HC4T1
    print $ weatherReport "sunny"
    print $ weatherReport "rainy"
    print $ weatherReport "cloudy"
    print $ weatherReport "foggy"

    -- HC4T2
    print $ dayType "Sunday"
    print $ dayType "Wednesday"
    print $ dayType "Funday"

    -- HC4T3
    print $ gradeComment 95
    print $ gradeComment 75
    print $ gradeComment 55
    print $ gradeComment 30
    print $ gradeComment 110

    -- HC4T4 & HC4T5
    print $ specialBirthday 1
    print $ specialBirthday 18
    print $ specialBirthday 77

    -- HC4T6
    print $ whatsInsideThisList ([] :: [Int])
    print $ whatsInsideThisList [1]
    print $ whatsInsideThisList [1,2]
    print $ whatsInsideThisList [1,2,3]

    -- HC4T7
    print $ firstAndThird [10, 20, 30, 40]
    print $ firstAndThird [1, 2]
    print $ firstAndThird [1, 2, 3]

    -- HC4T8
    print $ describeTuple ("Alice", 22, True)
    print $ describeTuple ("Bob", 35, False)
-- HC4T1 - Task 1: Define a weatherReport Function using pattern matching
weatherReport :: String -> String
weatherReport "sunny"  = "It's a bright and beautiful day!"
weatherReport "rainy"  = "Don't forget your umbrella!"
weatherReport "cloudy" = "A bit gloomy, but no rain yet!"
weatherReport _        = "Weather unknown"

-- HC4T2 - Task 2: Define a dayType Function
dayType :: String -> String
dayType "Saturday" = "It's a weekend!"
dayType "Sunday"   = "It's a weekend!"
dayType day
    | day `elem` ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"] = "It's a weekday."
    | otherwise = "Invalid day"

-- HC4T3 - Task 3: Define a gradeComment Function
gradeComment :: Int -> String
gradeComment n
    | n >= 90 && n <= 100 = "Excellent!"
    | n >= 70 && n <= 89  = "Good job!"
    | n >= 50 && n <= 69  = "You passed."
    | n >= 0 && n <= 49   = "Better luck next time."
    | otherwise           = "Invalid grade"

-- HC4T4 & HC4T5 - Tasks 4 & 5: Rewrite and Extend specialBirthday using pattern matching
specialBirthday :: Int -> String
specialBirthday 1 = "First birthday - Happy 1st!"
specialBirthday 16 = "Sweet sixteen!"
specialBirthday 18 = "You're now an adult!"
specialBirthday 21 = "Cheers to 21!"
specialBirthday 50 = "Half a century old!"
specialBirthday age = "Happy " ++ show age ++ "th birthday!"

-- HC4T6 - Task 6: Identify List Contents Using Pattern Matching
whatsInsideThisList :: [a] -> String
whatsInsideThisList [] = "The list is empty."
whatsInsideThisList [_] = "The list has one element."
whatsInsideThisList [_, _] = "The list has two elements."
whatsInsideThisList _ = "The list has many elements."

-- HC4T7 - Task 7: Ignore Elements in a List
firstAndThird :: [a] -> [a]
firstAndThird (x:_:z:_) = [x, z]
firstAndThird _ = []

-- HC4T8 - Task 8: Extract Values from Tuples
describeTuple :: (String, Int, Bool) -> String
describeTuple (name, age, isStudent) =
    name ++ " is " ++ show age ++ " years old and " ++
    (if isStudent then "is a student." else "is not a student.")

-- Main function to test all tasks
main :: IO ()
main = do
    -- HC4T1
    print $ weatherReport "sunny"
    print $ weatherReport "rainy"
    print $ weatherReport "cloudy"
    print $ weatherReport "foggy"

    -- HC4T2
    print $ dayType "Sunday"
    print $ dayType "Wednesday"
    print $ dayType "Funday"

    -- HC4T3
    print $ gradeComment 95
    print $ gradeComment 75
    print $ gradeComment 55
    print $ gradeComment 30
    print $ gradeComment 110

    -- HC4T4 & HC4T5
    print $ specialBirthday 1
    print $ specialBirthday 18
    print $ specialBirthday 77

    -- HC4T6
    print $ whatsInsideThisList ([] :: [Int])
    print $ whatsInsideThisList [1]
    print $ whatsInsideThisList [1,2]
    print $ whatsInsideThisList [1,2,3]

    -- HC4T7
    print $ firstAndThird [10, 20, 30, 40]
    print $ firstAndThird [1, 2]
    print $ firstAndThird [1, 2, 3]

    -- HC4T8
    print $ describeTuple ("Alice", 22, True)
    print $ describeTuple ("Bob", 35, False)
